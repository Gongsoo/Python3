#14226
from collections import deque

target = int(input())
S = [1000] * 1001
visited = [[1000 for _ in range(1001)] for _ in range(1001)]

clip = 0
dis = 1
q= deque([(dis,clip)])
visited[dis][clip] = 0
while q :
    d, c= q.popleft()
    if visited[d][d] == 1000:
        visited[d][d] = True
        visited[d][d] = visited[d][c] + 1
        q.append((d,d))
    if d+c < 1001 and visited[d+c][c] == 1000 :
        visited[d+c][c] = True
        visited[d+c][c] = visited[d][c] + 1
        q.append((d+c,c))
    if d-1>=0 and visited[d-1][c] == 1000 :
        visited[d-1][c] = True
        visited[d-1][c] = visited[d][c] + 1
        q.append((d-1,c))

    
print(min(*visited[target]))

#13549
from collections import deque
n,x = map(int,input().split())
q = deque()
visited = [-1] * 100001
q.append(n)
visited[n] = 0

while q :
    tmp = q.popleft()
    
    save = tmp
    while save != 0 and save < 100001 :
        if visited[save] == -1:
            visited[save] = visited[tmp]
            q.append(save)
        save*=2
    for i in [tmp-1,tmp+1] :
        if 0<=i<100001 and visited[i] == -1 :
            visited[i] = visited[tmp] + 1
            q.append(i)
print(visited[x])

#1261
import sys
from collections import deque

input = sys.stdin.readline

n, m = map(int,input().split())
board = [list(map(int,input().strip('\n'))) for _ in range(m)]
visited = [[False]*n for _ in range(m)]
q = deque([(0,0,0)])
visited[0][0] = True
while q :
    x, y, z = q.popleft()
    if (x,y) == (n-1,m-1) :
        answer = z
        break
    for idx, idy in [(0,1),(0,-1),(-1,0),(1,0)] :
        nx, ny = idx+x,idy+y
        if 0<=nx<n and 0<=ny<m and not visited[ny][nx] :
            if board[ny][nx] == 0:
                visited[ny][nx] = True
                q.appendleft((nx,ny,z))
            elif board[ny][nx] == 1:
                visited[ny][nx] = True
                q.append((nx,ny,z+1))
print(answer)

#1991
import sys
from collections import deque

input = sys.stdin.readline

n = int(input())

tree = {}
for i in range(n):
    a,b,c = map(str,input().split())
    tree[a] = [b,c]

def pre(r) :
    if r != '.' :
        print(r, end='')
        pre(tree[r][0])
        pre(tree[r][1])

def ino(r) :
    if r != '.' :
        ino(tree[r][0])
        print(r, end='')
        ino(tree[r][1])

def post(r) :
    if r != '.' :
        post(tree[r][0])
        post(tree[r][1])
        print(r, end='')

pre('A')
print()
ino('A')
print()
post('A')
