# Hotel
def time_to_min(str):
    t,m = map(int,str.split(':'))
    return t*60+m


def solution(book_time):
    answer = 0
    room = []
    book_time = sorted(book_time)
    room = [book_time[0][1]]
    for i in book_time[1:] :
        for cnt,j in enumerate(room) :
            if time_to_min(j)+10 <= time_to_min(i[0]) :
                room[cnt] = i[1]
                break
        else:
            room.append(i[1])
            
                
    return len(room)


# HR
def solution(scores):

    ho = scores[0]
    ho_sum = sum(ho)
    rank,max_score = 1,0
    scores.sort(key=lambda score : (-score[0],score[1]))
    for i in scores :
        if i[0]>ho[0] and i[1]>ho[1] :
            return -1
        if i[1] >= max_score :
            if ho_sum < sum(i) :
                rank+=1
            max_score = i[1]
    
    return rank

# return
from collections import deque

def bfs(destination,cost,visited) :
    q = deque([destination])
    visited[destination] = 0
    while q :
        x = q.popleft()
        for i in cost[x] :
            if visited[i] == -1 :
                q.append(i)
                visited[i] = visited[x] + 1
    return visited

def solution(n, roads, sources, destination):

    cost = [[] for _ in range(n+1)]
    visited = [-1 for _ in range(n+1)]
    for i in roads :
        cost[i[0]].append(i[1])
        cost[i[1]].append(i[0])
    visited = bfs(destination,cost,visited)
    
    
    return [visited[i] for i in sources]

#Hiking (수정필요,,,,, heap??)
def solution(n, paths, gates, summits):
    global answer
    answer = [n,10000001]
    cost = [[-1 for _ in range(n+1)] for _ in range(n+1)]
    g = [[] for _ in range(n+1)]
    visited = [False for _ in range(n+1)]
    min_cost = []
    for x,y,z in paths :
        g[x].append(y)
        g[y].append(x)
        cost[x][y] = z
        cost[y][x] = z
    for i in gates :
        visited[i] = True
    for i in gates :
        dfs(i,g,visited,cost,summits,min_cost)

    return answer

def dfs(x,g,visited,cost,summits,min_cost) :
    global answer
    if x in summits :
        
        tmp = max(min_cost)
        if answer[1] == tmp:
            answer[0] = min(answer[0], x)
            return
        elif answer[1] > tmp :
            answer[1] = tmp
            answer[0] = x
            return
        return 
    for i in g[x] :
        if not visited[i] :
            visited[i] = True
            min_cost.append(cost[i][x])
            dfs(i,g,visited,cost,summits,min_cost)
            visited[i] = False
            min_cost.pop()
# heap으로 구현
# 왜 heap이냐? h에 (강도,노드) 이렇게 저장할건데 강도가 낮은순서대로 돌고싶음,, 
# set은 왜 해줌? -> summits가 리스트면 확인할때마다 최대 O(n)의 시간이 걸림 그래서 set으로 해줌(이걸 해쉬화라고 하는건가..?)
from collections import defaultdict
import heapq
def solution(n, paths, gates, summits):
    answer = []
    h = []
    g = defaultdict(list)
    costs = [10000001 for _ in range(n+1)]
    summits = set(summits)
    for x,y,z in paths :
        g[x].append((y,z))
        g[y].append((x,z))
    for gate in gates :
        heapq.heappush(h,(0,gate))
        costs[gate] = 0
    while h :
        cost, node = heapq.heappop(h)
        if node in summits or cost > costs[node] :
            continue
        for idn, idc in g[node] :
            max_cost = max(idc,cost)
            if max_cost < costs[idn] :
                costs[idn] = max_cost
                heapq.heappush(h,(max_cost,idn))
    for summit in summits :
        answer.append((summit,costs[summit]))
    answer.sort(key = lambda x:(x[1],x[0]))
    return answer[0]
