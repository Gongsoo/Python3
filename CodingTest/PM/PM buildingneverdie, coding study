#파괴되지않은 건물(누적합)
#엄청난 스끼를배웠다..
def solution(board, skill):
    n, m = len(board), len(board[0])
    cnt = 0
    tmp = [[0 for _ in range(m+1)] for _ in range(n+1)]
    for ski in skill :
        t,r1,c1,r2,c2,d = ski
        if t == 1 :
            tmp[r1][c1] += -d
            tmp[r1][c2+1] += d
            tmp[r2+1][c1] += d
            tmp[r2+1][c2+1] += -d
        else :
            tmp[r1][c1] += d
            tmp[r1][c2+1] += -d
            tmp[r2+1][c1] += -d
            tmp[r2+1][c2+1] += d
    for i in range(n+1) :
        for j in range(1,m+1):
            tmp[i][j] += tmp[i][j-1]
    for i in range(m+1) :
        for j in range(1,n+1) :
            tmp[j][i] += tmp[j-1][i]
    for i in range(n) :
        for j in range(m) :
            board[i][j] += tmp[i][j]
            if board[i][j] >0 :
                cnt+=1

    return cnt

#코딩공부,,,,,,,,,,, heap으로도 풀어보자
import heapq

def solution(alp, cop, problems):
    max_alp, max_cop = max(x[0] for x in problems), max(x[1] for x in problems)
    table = [[int(1e9) for _ in range(151)] for _ in range(151)]
    problems += [[0, 0, 1, 0, 1], [0, 0, 0, 1, 1]]

    h = [(0, alp, cop)]
    table[alp][cop] = 0
    while h:
        curr_cost, curr_alp, curr_cop = heapq.heappop(h)
        if curr_alp >= max_alp and curr_cop >= max_cop:
            return curr_cost
        if table[curr_alp][curr_cop] <= curr_cost:
            for r_alp, r_cop, a_alp, a_cop, n_cost in problems:
                n_alp, n_cop = min(150, curr_alp + a_alp), min(150, curr_cop + a_cop)
                if curr_alp >= r_alp and curr_cop >= r_cop and curr_cost + n_cost < table[n_alp][n_cop]:
                    table[n_alp][n_cop] = curr_cost + n_cost
                    heapq.heappush(h, (curr_cost + n_cost, n_alp, n_cop))
#요건 dp풀이
def solution(alp, cop, problems):
    req_alp, req_cop = max(list(zip(*problems))[0]), max(list(zip(*problems))[1])
    dp = [[151 for _ in range(req_cop+1)] for _ in range(req_alp+1)]

    alp = min(alp,req_alp)
    cop = min(cop,req_cop)
    dp[alp][cop] = 0
    for i in range(alp,req_alp+1) :
        for j in range(cop,req_cop+1) :
            if i+1 <= req_alp :
                dp[i+1][j] = min(dp[i+1][j],dp[i][j]+1)
            if j+1 <= req_cop :
                dp[i][j+1] = min(dp[i][j+1],dp[i][j]+1)
            for a,b,c,d,e in problems :
                if i>=a and j>=b:
                    al, co = min(req_alp,i+c), min(req_cop,j+d)
                    dp[al][co] = min(dp[al][co],dp[i][j]+e)


    return dp[-1][-1]
